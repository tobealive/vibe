name: CI

on:
  push:
    paths-ignore: ['**/*.md']
  pull_request:
    paths-ignore: ['**/*.md']

env:
  WORK_PATH: /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/
  MOD_PATH: ~/.vmodules/vibe

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Cache Status
        id: cache-status
        uses: actions/cache@v3
        with:
          path: ${{ env.WORK_PATH }}vlang/
          key: ${{ runner.os }}-v-

      - if: ${{ steps.cache-status.outputs.cache-hit != 'true' }}
        name: Install V
        uses: vlang/setup-v@v1.3
        with:
          check-latest: true

      - if: ${{ steps.cache-status.outputs.cache-hit != 'true' }}
        name: Add V Version to Environment
        run: echo "V_VER=$(v -v)" >> $GITHUB_ENV

      - if: ${{ steps.cache-status.outputs.cache-hit != 'true' }}
        name: Cache V
        uses: actions/cache/save@v3
        with:
          path: vlang/
          key: ${{ runner.os }}-v-${{ env.V_VER }}

  lint:
    needs: setup
    uses: tobealive/vibe/.github/workflows/lint.yml@main

  simple-build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        trimming: [null, -skip-unused]
        optimization: [null, -cstrict]
    steps:
      - name: Restore V Cache
        uses: actions/cache/restore@v3
        with:
          path: vlang/
          key: ${{ runner.os }}-v-
          fail-on-cache-miss: true

      - name: Setup V
        uses: vlang/setup-v@v1.3

      - name: Setup libcurl
        run: sudo apt install libcurl4-openssl-dev

      - name: Checkout ${{ github.event.repository.name }}
        uses: actions/checkout@v3

      - name: Copy ${{ github.event.repository.name }} to .vmodules
        run: cp -r ${{ env.WORK_PATH }} ${{ env.MOD_PATH }}

      - name: ${{ matrix.trimming }} build
        run: v -cg -shared ${{ matrix.trimming }} ${{ matrix.optimization }} ${{ env.MOD_PATH }}

  test:
    needs: simple-build
    runs-on: ubuntu-latest
    steps:
      - name: Restore V Cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.WORK_PATH }}vlang/
          key: ${{ runner.os }}-v-
          fail-on-cache-miss: true

      - name: Setup V
        uses: vlang/setup-v@v1.3

      - name: Setup libcurl
        run: sudo apt install libcurl4-openssl-dev

      - name: Checkout ${{ github.event.repository.name }}
        uses: actions/checkout@v3

      - name: Copy ${{ github.event.repository.name }} to .vmodules
        run: cp -r ${{ env.WORK_PATH }} ${{ env.MOD_PATH }}

      - name: Run tests
        run: v test ${{ env.MOD_PATH }}

  setup-clang:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Check if LLVM and Clang is cached
        id: check-llvm-cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.WORK_PATH }}llvm
          key: llvm-15

      - if: ${{ steps.check-llvm-cache.outputs.cache-hit != 'true' }}
        name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: '15'

      - if: ${{ steps.check-llvm-cache.outputs.cache-hit != 'true' }}
        name: Cache LLVM and Clang
        uses: actions/cache/save@v3
        with:
          path: ${{ env.WORK_PATH }}llvm
          key: llvm-15

  different-compilers:
    needs: setup-clang
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        trimming: [null, -skip-unused]
        optimization: [null, -prod]
    steps:
      - name: Restore V Cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.WORK_PATH }}vlang/
          key: ${{ runner.os }}-v-
          fail-on-cache-miss: true

      - name: Setup V
        uses: vlang/setup-v@v1.3

      - if: ${{ matrix.compiler == 'gcc' }}
        name: Setup GCC
        run: |
          sudo apt-get update
          sudo apt-get install --quiet -y build-essential

      - if: ${{ matrix.compiler == 'clang' }}
        name: Restore LLVM and Clang Cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.WORK_PATH }}llvm
          key: llvm-15
          fail-on-cache-miss: true

      - if: ${{ matrix.compiler == 'clang' }}
        name: Setup LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: '15'
          cached: true

      - name: Setup libcurl
        run: sudo apt install libcurl4-openssl-dev

      - name: Checkout ${{ github.event.repository.name }}
        uses: actions/checkout@v3

      - name: Copy ${{ github.event.repository.name }} to .vmodules
        run: cp -r ${{ env.WORK_PATH }} ${{ env.MOD_PATH }}

      - if: ${{ matrix.compiler == 'clang' }}
        name: ${{ matrix.compiler }} ${{ matrix.trimming }} build
        run: |
          cp -r ${{ env.WORK_PATH }} ${{ env.MOD_PATH }}
          v -cg -shared -cc ${{ matrix.compiler }} ${{ matrix.trimming }} ${{ env.MOD_PATH }}

      - if: ${{ matrix.compiler == 'gcc' }}
        name: ${{ matrix.compiler }} ${{ matrix.trimming }} ${{ matrix.optimization }} build
        run: v -cg -shared -cc ${{ matrix.compiler }} ${{ matrix.trimming }} ${{ matrix.optimization }} ${{ env.MOD_PATH }}

  gcc-sanitizers:
    needs: different-compilers
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: [leak] # TODO: thread sanitizer was removed due to strange warnings. It should be fixed and turned on.
    steps:
      - name: Restore V Cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.WORK_PATH }}vlang/
          key: ${{ runner.os }}-v-
          fail-on-cache-miss: true

      - name: Setup V
        uses: vlang/setup-v@v1.3

      - name: Setup GCC
        run: |
          sudo apt-get update
          sudo apt-get install --quiet -y build-essential

      - name: Setup libcurl
        run: sudo apt install libcurl4-openssl-dev

      - name: Checkout ${{ github.event.repository.name }}
        uses: actions/checkout@v3

      - name: Copy ${{ github.event.repository.name }} to .vmodules
        run: cp -r ${{ env.WORK_PATH }} ${{ env.MOD_PATH }}

      - name: GCC ${{ matrix.sanitizer }} sanitizer
        run: v -cc gcc -cflags -fsanitize=${{ matrix.sanitizer }} test ${{ env.MOD_PATH }}
